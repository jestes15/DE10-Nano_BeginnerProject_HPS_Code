#ifndef _ALTERA_HPS_0_H_
#define _ALTERA_HPS_0_H_

/*
 * This file was automatically generated by the swinfo2header utility.
 * 
 * Created from SOPC Builder system 'soc_system' in
 * file 'soc_system.sopcinfo'.
 */

/*
 * This file contains macros for module 'hps_0' and devices
 * connected to the following master:
 *   h2f_axi_master
 * 
 * Do not include this header file and another header file created for a
 * different module or master group at the same time.
 * Doing so may result in duplicate macro names.
 * Instead, use the system header file which has macros with unique names.
 */

/*
 * Macros for device 'pio64_out_0', class 'pio64_out'
 * The macros are prefixed with 'PIO64_OUT_0_'.
 * The prefix is the slave descriptor.
 */
#define PIO64_OUT_0_COMPONENT_TYPE pio64_out
#define PIO64_OUT_0_COMPONENT_NAME pio64_out_0
#define PIO64_OUT_0_BASE 0x0
#define PIO64_OUT_0_SPAN 8
#define PIO64_OUT_0_END 0x7

/*
 * Macros for device 'pio64_out_1', class 'pio64_out'
 * The macros are prefixed with 'PIO64_OUT_1_'.
 * The prefix is the slave descriptor.
 */
#define PIO64_OUT_1_COMPONENT_TYPE pio64_out
#define PIO64_OUT_1_COMPONENT_NAME pio64_out_1
#define PIO64_OUT_1_BASE 0x8
#define PIO64_OUT_1_SPAN 8
#define PIO64_OUT_1_END 0xf

/*
 * Macros for device 'pio64_in_0', class 'pio64_in'
 * The macros are prefixed with 'PIO64_IN_0_'.
 * The prefix is the slave descriptor.
 */
#define PIO64_IN_0_COMPONENT_TYPE pio64_in
#define PIO64_IN_0_COMPONENT_NAME pio64_in_0
#define PIO64_IN_0_BASE 0x10
#define PIO64_IN_0_SPAN 8
#define PIO64_IN_0_END 0x17

/*
 * Macros for device 'led_pio', class 'altera_avalon_pio'
 * The macros are prefixed with 'LED_PIO_'.
 * The prefix is the slave descriptor.
 */
#define LED_PIO_COMPONENT_TYPE altera_avalon_pio
#define LED_PIO_COMPONENT_NAME led_pio
#define LED_PIO_BASE 0x20
#define LED_PIO_SPAN 16
#define LED_PIO_END 0x2f
#define LED_PIO_BIT_CLEARING_EDGE_REGISTER 0
#define LED_PIO_BIT_MODIFYING_OUTPUT_REGISTER 0
#define LED_PIO_CAPTURE 0
#define LED_PIO_DATA_WIDTH 7
#define LED_PIO_DO_TEST_BENCH_WIRING 0
#define LED_PIO_DRIVEN_SIM_VALUE 0
#define LED_PIO_EDGE_TYPE NONE
#define LED_PIO_FREQ 50000000
#define LED_PIO_HAS_IN 0
#define LED_PIO_HAS_OUT 1
#define LED_PIO_HAS_TRI 0
#define LED_PIO_IRQ_TYPE NONE
#define LED_PIO_RESET_VALUE 127

/*
 * Macros for device 'random', class 'altera_avalon_pio'
 * The macros are prefixed with 'RANDOM_'.
 * The prefix is the slave descriptor.
 */
#define RANDOM_COMPONENT_TYPE altera_avalon_pio
#define RANDOM_COMPONENT_NAME random
#define RANDOM_BASE 0x30
#define RANDOM_SPAN 16
#define RANDOM_END 0x3f
#define RANDOM_IRQ 0
#define RANDOM_BIT_CLEARING_EDGE_REGISTER 0
#define RANDOM_BIT_MODIFYING_OUTPUT_REGISTER 0
#define RANDOM_CAPTURE 0
#define RANDOM_DATA_WIDTH 32
#define RANDOM_DO_TEST_BENCH_WIRING 0
#define RANDOM_DRIVEN_SIM_VALUE 0
#define RANDOM_EDGE_TYPE NONE
#define RANDOM_FREQ 50000000
#define RANDOM_HAS_IN 1
#define RANDOM_HAS_OUT 0
#define RANDOM_HAS_TRI 0
#define RANDOM_IRQ_TYPE LEVEL
#define RANDOM_RESET_VALUE 0

/*
 * Macros for device 'ctrl_register', class 'altera_avalon_pio'
 * The macros are prefixed with 'CTRL_REGISTER_'.
 * The prefix is the slave descriptor.
 */
#define CTRL_REGISTER_COMPONENT_TYPE altera_avalon_pio
#define CTRL_REGISTER_COMPONENT_NAME ctrl_register
#define CTRL_REGISTER_BASE 0x40
#define CTRL_REGISTER_SPAN 16
#define CTRL_REGISTER_END 0x4f
#define CTRL_REGISTER_BIT_CLEARING_EDGE_REGISTER 1
#define CTRL_REGISTER_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CTRL_REGISTER_CAPTURE 0
#define CTRL_REGISTER_DATA_WIDTH 2
#define CTRL_REGISTER_DO_TEST_BENCH_WIRING 0
#define CTRL_REGISTER_DRIVEN_SIM_VALUE 0
#define CTRL_REGISTER_EDGE_TYPE NONE
#define CTRL_REGISTER_FREQ 50000000
#define CTRL_REGISTER_HAS_IN 0
#define CTRL_REGISTER_HAS_OUT 1
#define CTRL_REGISTER_HAS_TRI 0
#define CTRL_REGISTER_IRQ_TYPE NONE
#define CTRL_REGISTER_RESET_VALUE 0


#endif /* _ALTERA_HPS_0_H_ */
