#ifndef _ALTERA_HPS_0_H_
#define _ALTERA_HPS_0_H_

/*
 * This file was automatically generated by the swinfo2header utility.
 * 
 * Created from SOPC Builder system 'soc_system' in
 * file './soc_system.sopcinfo'.
 */

/*
 * This file contains macros for module 'hps_0' and devices
 * connected to the following masters:
 *   h2f_axi_master
 *   h2f_lw_axi_master
 * 
 * Do not include this header file and another header file created for a
 * different module or master group at the same time.
 * Doing so may result in duplicate macro names.
 * Instead, use the system header file which has macros with unique names.
 */

/*
 * Macros for device 'adder_register_b', class 'pio64_out'
 * The macros are prefixed with 'ADDER_REGISTER_B_'.
 * The prefix is the slave descriptor.
 */
#define ADDER_REGISTER_B_COMPONENT_TYPE pio64_out
#define ADDER_REGISTER_B_COMPONENT_NAME adder_register_b
#define ADDER_REGISTER_B_BASE 0x0
#define ADDER_REGISTER_B_SPAN 8
#define ADDER_REGISTER_B_END 0x7

/*
 * Macros for device 'adder_register_a', class 'pio64_out'
 * The macros are prefixed with 'ADDER_REGISTER_A_'.
 * The prefix is the slave descriptor.
 */
#define ADDER_REGISTER_A_COMPONENT_TYPE pio64_out
#define ADDER_REGISTER_A_COMPONENT_NAME adder_register_a
#define ADDER_REGISTER_A_BASE 0x8
#define ADDER_REGISTER_A_SPAN 8
#define ADDER_REGISTER_A_END 0xf

/*
 * Macros for device 'adder_register_sum', class 'pio64_in'
 * The macros are prefixed with 'ADDER_REGISTER_SUM_'.
 * The prefix is the slave descriptor.
 */
#define ADDER_REGISTER_SUM_COMPONENT_TYPE pio64_in
#define ADDER_REGISTER_SUM_COMPONENT_NAME adder_register_sum
#define ADDER_REGISTER_SUM_BASE 0x10
#define ADDER_REGISTER_SUM_SPAN 8
#define ADDER_REGISTER_SUM_END 0x17

/*
 * Macros for device 'random', class 'altera_avalon_pio'
 * The macros are prefixed with 'RANDOM_'.
 * The prefix is the slave descriptor.
 */
#define RANDOM_COMPONENT_TYPE altera_avalon_pio
#define RANDOM_COMPONENT_NAME random
#define RANDOM_BASE 0x20
#define RANDOM_SPAN 16
#define RANDOM_END 0x2f
#define RANDOM_IRQ 3
#define RANDOM_BIT_CLEARING_EDGE_REGISTER 0
#define RANDOM_BIT_MODIFYING_OUTPUT_REGISTER 0
#define RANDOM_CAPTURE 0
#define RANDOM_DATA_WIDTH 32
#define RANDOM_DO_TEST_BENCH_WIRING 0
#define RANDOM_DRIVEN_SIM_VALUE 0
#define RANDOM_EDGE_TYPE NONE
#define RANDOM_FREQ 50000000
#define RANDOM_HAS_IN 1
#define RANDOM_HAS_OUT 0
#define RANDOM_HAS_TRI 0
#define RANDOM_IRQ_TYPE LEVEL
#define RANDOM_RESET_VALUE 0

/*
 * Macros for device 'ctrl_register', class 'altera_avalon_pio'
 * The macros are prefixed with 'CTRL_REGISTER_'.
 * The prefix is the slave descriptor.
 */
#define CTRL_REGISTER_COMPONENT_TYPE altera_avalon_pio
#define CTRL_REGISTER_COMPONENT_NAME ctrl_register
#define CTRL_REGISTER_BASE 0x30
#define CTRL_REGISTER_SPAN 16
#define CTRL_REGISTER_END 0x3f
#define CTRL_REGISTER_BIT_CLEARING_EDGE_REGISTER 0
#define CTRL_REGISTER_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CTRL_REGISTER_CAPTURE 0
#define CTRL_REGISTER_DATA_WIDTH 2
#define CTRL_REGISTER_DO_TEST_BENCH_WIRING 0
#define CTRL_REGISTER_DRIVEN_SIM_VALUE 0
#define CTRL_REGISTER_EDGE_TYPE NONE
#define CTRL_REGISTER_FREQ 50000000
#define CTRL_REGISTER_HAS_IN 0
#define CTRL_REGISTER_HAS_OUT 1
#define CTRL_REGISTER_HAS_TRI 0
#define CTRL_REGISTER_IRQ_TYPE NONE
#define CTRL_REGISTER_RESET_VALUE 0

/*
 * Macros for device 'lfsr_reset_value_reg', class 'altera_avalon_pio'
 * The macros are prefixed with 'LFSR_RESET_VALUE_REG_'.
 * The prefix is the slave descriptor.
 */
#define LFSR_RESET_VALUE_REG_COMPONENT_TYPE altera_avalon_pio
#define LFSR_RESET_VALUE_REG_COMPONENT_NAME ctrl_register
#define LFSR_RESET_VALUE_REG_BASE 0x40
#define LFSR_RESET_VALUE_REG_SPAN 16
#define LFSR_RESET_VALUE_REG_END 0x4f
#define LFSR_RESET_VALUE_REG_BIT_CLEARING_EDGE_REGISTER 0
#define LFSR_RESET_VALUE_REG_BIT_MODIFYING_OUTPUT_REGISTER 0
#define LFSR_RESET_VALUE_REG_CAPTURE 0
#define LFSR_RESET_VALUE_REG_DATA_WIDTH 32
#define LFSR_RESET_VALUE_REG_DO_TEST_BENCH_WIRING 0
#define LFSR_RESET_VALUE_REG_DRIVEN_SIM_VALUE 0
#define LFSR_RESET_VALUE_REG_EDGE_TYPE NONE
#define LFSR_RESET_VALUE_REG_FREQ 50000000
#define LFSR_RESET_VALUE_REG_HAS_IN 0
#define LFSR_RESET_VALUE_REG_HAS_OUT 1
#define LFSR_RESET_VALUE_REG_HAS_TRI 0
#define LFSR_RESET_VALUE_REG_IRQ_TYPE NONE
#define LFSR_RESET_VALUE_REG_RESET_VALUE 0x3f60ff91

/*
 * Macros for device 'uart_0', class 'altera_avalon_uart'
 * The macros are prefixed with 'UART_0_'.
 * The prefix is the slave descriptor.
 */
#define UART_0_COMPONENT_TYPE altera_avalon_uart
#define UART_0_COMPONENT_NAME uart_0
#define UART_0_BASE 0x50
#define UART_0_SPAN 32
#define UART_0_END 0x6f
#define UART_0_IRQ 4
#define UART_0_BAUD 115200
#define UART_0_DATA_BITS 8
#define UART_0_FIXED_BAUD 1
#define UART_0_FREQ 50000000
#define UART_0_PARITY 'N'
#define UART_0_SIM_CHAR_STREAM ""
#define UART_0_SIM_TRUE_BAUD 0
#define UART_0_STOP_BITS 1
#define UART_0_SYNC_REG_DEPTH 2
#define UART_0_USE_CTS_RTS 0
#define UART_0_USE_EOP_REGISTER 0

/*
 * Macros for device 'sysid_qsys', class 'altera_avalon_sysid_qsys'
 * The macros are prefixed with 'SYSID_QSYS_'.
 * The prefix is the slave descriptor.
 */
#define SYSID_QSYS_COMPONENT_TYPE altera_avalon_sysid_qsys
#define SYSID_QSYS_COMPONENT_NAME sysid_qsys
#define SYSID_QSYS_BASE 0x1000
#define SYSID_QSYS_SPAN 8
#define SYSID_QSYS_END 0x1007
#define SYSID_QSYS_ID 2899645186
#define SYSID_QSYS_TIMESTAMP 1737337409

/*
 * Macros for device 'jtag_uart', class 'altera_avalon_jtag_uart'
 * The macros are prefixed with 'JTAG_UART_'.
 * The prefix is the slave descriptor.
 */
#define JTAG_UART_COMPONENT_TYPE altera_avalon_jtag_uart
#define JTAG_UART_COMPONENT_NAME jtag_uart
#define JTAG_UART_BASE 0x2000
#define JTAG_UART_SPAN 8
#define JTAG_UART_END 0x2007
#define JTAG_UART_IRQ 2
#define JTAG_UART_READ_DEPTH 64
#define JTAG_UART_READ_THRESHOLD 8
#define JTAG_UART_WRITE_DEPTH 64
#define JTAG_UART_WRITE_THRESHOLD 8

/*
 * Macros for device 'led_pio', class 'altera_avalon_pio'
 * The macros are prefixed with 'LED_PIO_'.
 * The prefix is the slave descriptor.
 */
#define LED_PIO_COMPONENT_TYPE altera_avalon_pio
#define LED_PIO_COMPONENT_NAME led_pio
#define LED_PIO_BASE 0x3000
#define LED_PIO_SPAN 16
#define LED_PIO_END 0x300f
#define LED_PIO_BIT_CLEARING_EDGE_REGISTER 0
#define LED_PIO_BIT_MODIFYING_OUTPUT_REGISTER 0
#define LED_PIO_CAPTURE 0
#define LED_PIO_DATA_WIDTH 7
#define LED_PIO_DO_TEST_BENCH_WIRING 0
#define LED_PIO_DRIVEN_SIM_VALUE 0
#define LED_PIO_EDGE_TYPE NONE
#define LED_PIO_FREQ 50000000
#define LED_PIO_HAS_IN 0
#define LED_PIO_HAS_OUT 1
#define LED_PIO_HAS_TRI 0
#define LED_PIO_IRQ_TYPE NONE
#define LED_PIO_RESET_VALUE 127

/*
 * Macros for device 'dipsw_pio', class 'altera_avalon_pio'
 * The macros are prefixed with 'DIPSW_PIO_'.
 * The prefix is the slave descriptor.
 */
#define DIPSW_PIO_COMPONENT_TYPE altera_avalon_pio
#define DIPSW_PIO_COMPONENT_NAME dipsw_pio
#define DIPSW_PIO_BASE 0x4000
#define DIPSW_PIO_SPAN 16
#define DIPSW_PIO_END 0x400f
#define DIPSW_PIO_IRQ 0
#define DIPSW_PIO_BIT_CLEARING_EDGE_REGISTER 1
#define DIPSW_PIO_BIT_MODIFYING_OUTPUT_REGISTER 0
#define DIPSW_PIO_CAPTURE 1
#define DIPSW_PIO_DATA_WIDTH 4
#define DIPSW_PIO_DO_TEST_BENCH_WIRING 0
#define DIPSW_PIO_DRIVEN_SIM_VALUE 0
#define DIPSW_PIO_EDGE_TYPE ANY
#define DIPSW_PIO_FREQ 50000000
#define DIPSW_PIO_HAS_IN 1
#define DIPSW_PIO_HAS_OUT 0
#define DIPSW_PIO_HAS_TRI 0
#define DIPSW_PIO_IRQ_TYPE EDGE
#define DIPSW_PIO_RESET_VALUE 0

/*
 * Macros for device 'button_pio', class 'altera_avalon_pio'
 * The macros are prefixed with 'BUTTON_PIO_'.
 * The prefix is the slave descriptor.
 */
#define BUTTON_PIO_COMPONENT_TYPE altera_avalon_pio
#define BUTTON_PIO_COMPONENT_NAME button_pio
#define BUTTON_PIO_BASE 0x5000
#define BUTTON_PIO_SPAN 16
#define BUTTON_PIO_END 0x500f
#define BUTTON_PIO_IRQ 1
#define BUTTON_PIO_BIT_CLEARING_EDGE_REGISTER 1
#define BUTTON_PIO_BIT_MODIFYING_OUTPUT_REGISTER 0
#define BUTTON_PIO_CAPTURE 1
#define BUTTON_PIO_DATA_WIDTH 2
#define BUTTON_PIO_DO_TEST_BENCH_WIRING 0
#define BUTTON_PIO_DRIVEN_SIM_VALUE 0
#define BUTTON_PIO_EDGE_TYPE FALLING
#define BUTTON_PIO_FREQ 50000000
#define BUTTON_PIO_HAS_IN 1
#define BUTTON_PIO_HAS_OUT 0
#define BUTTON_PIO_HAS_TRI 0
#define BUTTON_PIO_IRQ_TYPE EDGE
#define BUTTON_PIO_RESET_VALUE 0

/*
 * Macros for device 'ILC', class 'interrupt_latency_counter'
 * The macros are prefixed with 'ILC_'.
 * The prefix is the slave descriptor.
 */
#define ILC_COMPONENT_TYPE interrupt_latency_counter
#define ILC_COMPONENT_NAME ILC
#define ILC_BASE 0x30000
#define ILC_SPAN 256
#define ILC_END 0x300ff

/*
 * Macros for device 'alt_vip_vfr_hdmi', class 'alt_vip_vfr'
 * The macros are prefixed with 'ALT_VIP_VFR_HDMI_'.
 * The prefix is the slave descriptor.
 */
#define ALT_VIP_VFR_HDMI_COMPONENT_TYPE alt_vip_vfr
#define ALT_VIP_VFR_HDMI_COMPONENT_NAME alt_vip_vfr_hdmi
#define ALT_VIP_VFR_HDMI_BASE 0x31000
#define ALT_VIP_VFR_HDMI_SPAN 128
#define ALT_VIP_VFR_HDMI_END 0x3107f


#endif /* _ALTERA_HPS_0_H_ */
